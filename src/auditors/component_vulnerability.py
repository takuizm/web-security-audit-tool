"""
コンポーネント脆弱性診断

jQuery等のライブラリの脆弱性をチェックします。
"""

import re
from typing import Dict, Any, List, Optional
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException

from .base_auditor import BaseAuditor
from .data_models import AuditResult, AuditStatus


class ComponentVulnerabilityAuditor(BaseAuditor):
    """コンポーネント脆弱性診断クラス"""

    def __init__(self, config: Dict[str, Any]):
        super().__init__(config)
        self.audit_type = "component_vulnerability"

        # Chrome オプション設定
        self.chrome_options = Options()
        self.chrome_options.add_argument('--headless')
        self.chrome_options.add_argument('--no-sandbox')
        self.chrome_options.add_argument('--disable-dev-shm-usage')
        self.chrome_options.add_argument('--disable-gpu')
        self.chrome_options.add_argument('--window-size=1920,1080')
        self.chrome_options.add_argument('--disable-extensions')
        self.chrome_options.add_argument('--disable-plugins')

        # 既知の脆弱性バージョン
        self.vulnerable_jquery_versions = [
            "1.0", "1.1", "1.2", "1.3", "1.4", "1.5", "1.6",
            "1.7", "1.8", "1.9", "1.10", "1.11", "1.12",
            "2.0", "2.1", "2.2"
        ]

    def audit(self, url: str) -> AuditResult:
        """
        コンポーネント脆弱性診断を実行

        Args:
            url: 診断対象URL

        Returns:
            診断結果
        """
        details = {}
        recommendations = []
        checks = {}

        try:
            # jQuery バージョンチェック
            jquery_result = self._check_jquery_version(url)
            details['jquery'] = jquery_result
            checks['jquery_safe'] = jquery_result.get('status') == 'OK'

            if jquery_result.get('status') == 'NG':
                recommendations.append(
                    f"jQuery を最新版にアップデートしてください "
                    f"(現在: {jquery_result.get('version', 'unknown')})"
                )

            # JavaScript ライブラリ検出
            js_libs_result = self._detect_js_libraries(url)
            details['javascript_libraries'] = js_libs_result
            checks['js_libs_safe'] = not js_libs_result.get('has_vulnerabilities', False)

            if js_libs_result.get('has_vulnerabilities'):
                recommendations.append("検出された脆弱性のあるライブラリを更新してください")

            # メタ情報取得
            meta_info = self._get_meta_information(url)
            details['meta_information'] = meta_info

        except Exception as e:
            self.logger.error(f"Component vulnerability audit failed: {url}", error=str(e))
            return self.create_result(
                url=url,
                status=AuditStatus.ERROR,
                error_message=str(e)
            )

        # ステータス決定
        critical_issues = any([
            jquery_result.get('vulnerable', False),
            js_libs_result.get('has_vulnerabilities', False)
        ])

        status = self.determine_status(checks, critical_issues)

        return self.create_result(
            url=url,
            status=status,
            details=details,
            recommendations=recommendations
        )

    def _check_jquery_version(self, url: str) -> Dict[str, Any]:
        """
        jQuery バージョンをチェック

        Args:
            url: 診断対象URL

        Returns:
            jQuery チェック結果
        """
        driver = None
        try:
            driver = webdriver.Chrome(options=self.chrome_options)
            driver.set_page_load_timeout(self.config.get('timeout_seconds', 30))

            self.logger.debug(f"Loading page for jQuery check: {url}")
            driver.get(url)

            # ページ読み込み完了を待機
            WebDriverWait(driver, 10).until(
                lambda d: d.execute_script("return document.readyState") == "complete"
            )

            # jQuery バージョン取得
            jquery_version = driver.execute_script("""
                if (typeof $ !== 'undefined' && $.fn && $.fn.jquery) {
                    return $.fn.jquery;
                } else if (typeof jQuery !== 'undefined' && jQuery.fn && jQuery.fn.jquery) {
                    return jQuery.fn.jquery;
                } else {
                    return null;
                }
            """)

            if jquery_version:
                is_vulnerable = self._is_jquery_vulnerable(jquery_version)
                return {
                    'version': jquery_version,
                    'vulnerable': is_vulnerable,
                    'status': 'NG' if is_vulnerable else 'OK',
                    'details': f"jQuery {jquery_version} detected"
                }
            else:
                return {
                    'version': None,
                    'vulnerable': False,
                    'status': 'OK',
                    'details': 'jQuery not detected'
                }

        except TimeoutException:
            self.logger.warning(f"Page load timeout for jQuery check: {url}")
            return {
                'version': None,
                'vulnerable': None,
                'status': 'ERROR',
                'details': 'Page load timeout',
                'error': 'Timeout while loading page'
            }

        except WebDriverException as e:
            self.logger.warning(f"WebDriver error during jQuery check: {url}", error=str(e))
            return {
                'version': None,
                'vulnerable': None,
                'status': 'ERROR',
                'details': 'WebDriver error',
                'error': str(e)
            }

        except Exception as e:
            self.logger.error(f"Unexpected error during jQuery check: {url}", error=str(e))
            return {
                'version': None,
                'vulnerable': None,
                'status': 'ERROR',
                'details': 'Unexpected error',
                'error': str(e)
            }

        finally:
            if driver:
                try:
                    driver.quit()
                except Exception:
                    pass

    def _is_jquery_vulnerable(self, version: str) -> bool:
        """
        jQuery バージョンが脆弱かどうかを判定

        Args:
            version: jQuery バージョン

        Returns:
            True if vulnerable
        """
        if not version:
            return False

        # メジャーバージョンでの判定
        for vuln_version in self.vulnerable_jquery_versions:
            if version.startswith(vuln_version + ".") or version == vuln_version:
                return True

        # 具体的な脆弱性バージョンチェック
        vulnerable_specific = [
            "1.6.1", "1.6.2", "1.6.3", "1.6.4",
            "1.7.0", "1.7.1", "1.7.2",
            "1.8.0", "1.8.1", "1.8.2", "1.8.3",
            "1.9.0", "1.9.1",
            "1.11.0", "1.11.1", "1.11.2", "1.11.3",
            "1.12.0", "1.12.1", "1.12.2", "1.12.3", "1.12.4",
            "2.0.0", "2.0.1", "2.0.2", "2.0.3",
            "2.1.0", "2.1.1", "2.1.2", "2.1.3", "2.1.4",
            "2.2.0", "2.2.1", "2.2.2", "2.2.3", "2.2.4"
        ]

        return version in vulnerable_specific

    def _detect_js_libraries(self, url: str) -> Dict[str, Any]:
        """
        JavaScript ライブラリを検出

        Args:
            url: 診断対象URL

        Returns:
            ライブラリ検出結果
        """
        driver = None
        try:
            driver = webdriver.Chrome(options=self.chrome_options)
            driver.set_page_load_timeout(self.config.get('timeout_seconds', 30))

            driver.get(url)

            # ページ読み込み完了を待機
            WebDriverWait(driver, 10).until(
                lambda d: d.execute_script("return document.readyState") == "complete"
            )

            # ライブラリ検出スクリプト実行
            libraries = driver.execute_script("""
                var libs = {};

                // jQuery
                if (typeof $ !== 'undefined' || typeof jQuery !== 'undefined') {
                    var jq = typeof $ !== 'undefined' ? $ : jQuery;
                    if (jq.fn && jq.fn.jquery) {
                        libs.jquery = jq.fn.jquery;
                    }
                }

                // Angular
                if (typeof angular !== 'undefined' && angular.version) {
                    libs.angular = angular.version.full;
                }

                // React
                if (typeof React !== 'undefined' && React.version) {
                    libs.react = React.version;
                }

                // Vue.js
                if (typeof Vue !== 'undefined' && Vue.version) {
                    libs.vue = Vue.version;
                }

                // Bootstrap
                if (typeof bootstrap !== 'undefined' && bootstrap.Tooltip && bootstrap.Tooltip.VERSION) {
                    libs.bootstrap = bootstrap.Tooltip.VERSION;
                }

                return libs;
            """)

            # 脆弱性チェック
            has_vulnerabilities = False
            vulnerable_libs = []

            for lib_name, version in libraries.items():
                if self._is_library_vulnerable(lib_name, version):
                    has_vulnerabilities = True
                    vulnerable_libs.append(f"{lib_name} {version}")

            return {
                'libraries': libraries,
                'has_vulnerabilities': has_vulnerabilities,
                'vulnerable_libraries': vulnerable_libs,
                'total_libraries': len(libraries)
            }

        except Exception as e:
            self.logger.warning(f"JavaScript library detection failed: {url}", error=str(e))
            return {
                'libraries': {},
                'has_vulnerabilities': False,
                'vulnerable_libraries': [],
                'total_libraries': 0,
                'error': str(e)
            }

        finally:
            if driver:
                try:
                    driver.quit()
                except Exception:
                    pass

    def _is_library_vulnerable(self, lib_name: str, version: str) -> bool:
        """
        ライブラリが脆弱かどうかを判定

        Args:
            lib_name: ライブラリ名
            version: バージョン

        Returns:
            True if vulnerable
        """
        if lib_name == 'jquery':
            return self._is_jquery_vulnerable(version)

        # 他のライブラリの脆弱性チェックは簡略化
        # 実際の運用では詳細な脆弱性データベースとの照合が必要

        return False

    def _get_meta_information(self, url: str) -> Dict[str, Any]:
        """
        メタ情報を取得

        Args:
            url: 診断対象URL

        Returns:
            メタ情報
        """
        response = self.safe_request('GET', url)
        if not response:
            return {'error': 'Failed to fetch page'}

        meta_info = {
            'server': response.headers.get('Server', ''),
            'x_powered_by': response.headers.get('X-Powered-By', ''),
            'content_type': response.headers.get('Content-Type', ''),
            'status_code': response.status_code
        }

        # HTML からメタタグ抽出
        try:
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(response.text, 'html.parser')

            # Generator メタタグ
            generator = soup.find('meta', attrs={'name': 'generator'})
            if generator:
                meta_info['generator'] = generator.get('content', '')

            # その他のメタタグ
            meta_tags = soup.find_all('meta')
            meta_info['meta_tags_count'] = len(meta_tags)

        except Exception as e:
            self.logger.debug(f"Failed to parse HTML meta tags: {url}", error=str(e))

        return meta_info
